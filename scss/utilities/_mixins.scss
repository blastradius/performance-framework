// ==========================================================================
// Mixins
// ==========================================================================

//Before or After background

@mixin pseudo-b-a($pseudo-before-after) {
  &:#{$pseudo-before-after} {
    @include transition(all 0.5s ease);
    content: "";
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 0;
    @content;
  }
}

// BEM selectors

@mixin element($element) {
  &__#{$element} {
    @content;
  }
}

@mixin modifier($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Generate modifier color classes

@mixin button-colors--primary($map) {
  @each $theme, $color in $map {
    @include modifier($theme) {
      box-shadow: 0 0 0 2px $color;
      @include transition(all 0.5s ease);
      position: relative;
      overflow: hidden;
      color: $color;
      background-color: transparent;
      span {
        position: relative;
        z-index: 10;
      }
      @include pseudo-b-a(after) {
        background-color: $color;
      }
      &:hover {
        box-shadow: 0 0 0 2px $color;
        color: white;
        &:after {
          height: 100%;
        }
      }
    }
  }
}

@mixin button-colors--secondary($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      @include transition(all 0.25s ease);
      background-color: $color;
      color: white;
      position: relative;
      overflow: hidden;
      box-shadow: 0 0 0 0 #{$color}, 0 0 4px 0 rgba(palette(grey, x-dark), .75);
      &:hover {
        box-shadow: 0 0 0 4px #{$color}, 0 10px 20px 4px rgba(palette(grey, x-dark), .75);
      }
    }
  }
}

@mixin list-maker($list-type, $active-color: $bc-siren-dark, $list-style: null) {
  .#{$list-type}-list {
    @if $list-style == "none" {
      padding-left: 0;
    } @else {
      padding-left: em(16px);
    }
    list-style: $list-style;
    @include element(item) {
      @if $list-style == "none" {
        &:nth-child(even) {
          background-color: darken($white, 5%);
        }
      }
      padding-bottom: em(4px);
      @include modifier(active) {
        color: $active-color;
        font-weight: bold;
      }
    }
  }
}

// Generating :before or :after pseudo-element shapes

@mixin p-el($el,
$el-w: null,
$el-h: null) {
  @if $el == "before" or $el == "after" {
    &:#{$el} {
      @extend %pseudos;
      width: $el-w;
      height: $el-h;
      @content;
    }
  } @else {
    @error "`#{$el}` is not a valid pseudo-element.";
  }
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
  width: $w;
  height: $h;
  display: $disp;
}

// Adjacent sibling margins

@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}

// Table setup Mixin
@mixin table-colors($table-type, $main-color, $copy-color) {
  .#{$table-type}-table {
    td, th {
      @if $table-type == "alternate" {
        border: none;
      } @else {
        border-color: $copy-color;
      }
    }
    thead {
      th {
        color: $copy-color;
        background-color: $main-color;
      }
    }
    tbody {
      tr {
        @if $table-type == "alternate" {
          border-top: solid em(2px) $main-color;
        } @else {
          &:nth-child(even) {
            background-color: lighten($main-color, 50%);
          }
          &:nth-child(odd) {
            background-color: $copy-color;
          }
        }
      }
    }
    tfoot {
      tr {
        color: $copy-color;
        background-color: $main-color;
      }
    }
  }
}